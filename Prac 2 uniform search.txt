/*
UNIFORM COST SEARCH
ROLL NO: 67
*/

#include <bits/stdc++.h>
#include <queue> 

using namespace std;
typedef long long ll;
#define mm cout<<endl<<
#define show(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#define rep(i,s,e) for(i=s;i<e;i++)
#define pb push_back

void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cout << *it << " = " << a << endl;
    err(++it, args...);
}

typedef struct node{
    int node_no;
    int distance_travelled;
    int pid;
} nn;

struct is_min {
bool operator()(nn p1, nn p2) {
      return p1.distance_travelled > p2.distance_travelled;
  }
};

int cost[100][100];
int parent[100];
void uniform_cost_search(int ii,int gg,int n)
{
    int parent[n];
    int aaa,bbb,ccc;
    priority_queue <nn,vector<nn>, is_min> frontier;
    bool visited[n];
    map<int,int> frontier_check;
    rep(aaa,0,n) visited[aaa] = false;
    parent[ii]=-1;
    frontier.push({ii,0,-1});
    bool goal_found = false;
    while(!frontier.empty() && !goal_found)
    {
        nn node_to_do = frontier.top();
        int parent_distance = node_to_do.distance_travelled;
        visited[node_to_do.node_no] = true;
        if(node_to_do.node_no == gg)
        {
            cout<<"Distance : "<<parent_distance;
            cout<<endl<<gg;
            ll temp = parent[gg];
            while(parent[temp]!=-1)
            {
                cout<<"<-"<<temp<<"<-";
                temp=parent[temp];
            }
            cout<<"0";
            return;
        }
        nn tempn;
        rep(aaa,0,n)
        {
            if(cost[node_to_do.node_no][aaa] == 0 || (visited[aaa] and aaa!=gg)) continue;
            nn new_node = {aaa,parent_distance+cost[node_to_do.node_no][aaa],node_to_do.node_no};
            if(frontier_check[aaa]!=0)
            {
                vector<nn> temp;
                tempn = frontier.top();
                while(tempn.node_no!=aaa)
                {
                    temp.push_back(frontier.top());
                    frontier.pop();
                    tempn = frontier.top();
                }
                frontier.pop();
                while(!temp.empty())
                {
                    frontier.push(temp.back());
                    temp.pop_back();
                }

            if(tempn.distance_travelled<new_node.distance_travelled)
            {
                new_node.distance_travelled = tempn.distance_travelled;
                new_node.pid = tempn.pid;
            }
            }
            parent[new_node.node_no] = new_node.pid;
            frontier.push(new_node);
            frontier_check[aaa] = true;
        }
        frontier.pop();
    }
}

int main() 
{
    int no_of_nodes,no_of_edges;
    
    mm "Enter Number of Nodes";
    cin>>no_of_nodes;
    show(no_of_nodes);
    
    mm "Enter Number of Edges";
    cin>>no_of_edges;
    show(no_of_edges);

    int aa,bb,cc,dd;
    rep(aa,0,no_of_edges)
    rep(bb,0,no_of_edges)
    cost[aa][bb] = 0;

    rep(dd,0,no_of_edges){
        mm "Enter both vertices";
        cin>>aa>>bb;
        mm "Enter Weight of the Edge";
        cin>>cc;
        cost[aa][bb] = cc;
        cost[bb][aa] = cc;
    }
    
    int intial_node,goal_node;
    
    mm "Enter Initial Node";
    cin>>intial_node;
    show(intial_node);
    
    
    mm "Enter Goal Node";
    cin>>goal_node;
    show(goal_node);
    
    uniform_cost_search(intial_node,goal_node,no_of_nodes);
    
    return 0;
}